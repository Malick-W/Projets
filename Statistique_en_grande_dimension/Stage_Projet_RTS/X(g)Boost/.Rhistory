y = c(rep("train",length(msepcv.pcr$val[1,,])),rep("cv",length(msepcv.pcr$val[2,,])))
z = c(0:18,0:18)
dt = data.frame(x,y,z)
colnames(dt) = c("MSEP","sample","comps")
p = ggplot(dt,aes(x=comps,y=MSEP,col=sample))+geom_line()
p+theme_bw()
ncomp.pcr = which.min(msepcv.pcr$val["CV",,])-1
ncomp.pcr
summary(modele.pcr)
modele.pcr.fin = pcr(Espérance.de.Vie~., ncomp=ncomp.pcr, data = data.app, scale=stdX.app)
ychap = predict(modele.pcr.fin,newdata=data.test)[,1,ncomp.pcr]
res.pcr = data.test[,"Espérance.de.Vie"]-ychap
mean(res.pcr**2)
modele.pls = plsr(Espérance.de.Vie ~.,ncomp=18,data = data.app,scale=stdX.app,validation = "CV")
msepcv.pls = MSEP(modele.pls,estimate=c("train","CV")) ## Erreur Quadratique de Prediction.
x=c(msepcv.pls$val[1,,],msepcv.pls$val[2,,])
y=c(rep("train",length(msepcv.pls$val[1,,])),rep("cv",length(msepcv.pls$val[2,,])))
z=c(0:18,0:18)
dt=data.frame(x,y,z)
colnames(dt)=c("msep","sample","comps")
p<-ggplot(dt,aes(x=comps,y=msep,col=sample))+geom_line()
p+theme_bw()
ncomp.pls = which.min(msepcv.pls$val["CV",,])-1
ncomp.pls
summary(modele.pls)
modele.pls.fin = plsr(Espérance.de.Vie~., ncomp=ncomp.pcr,
data = data.app, scale=stdX.app)
ychap = predict(modele.pls.fin,newdata=data.test)[,1,ncomp.pls]
res.pls = data.test[,"Espérance.de.Vie"]-ychap
mean(res.pls^2)
plot(modele.pls, plottype = "scores", comps = 1:3)
plot(modele.pls, ncomp = 3, asp = 1, line = TRUE)
plot(modele.pls, plottype = "coef", ncomp=1:3, legendpos = "bottomleft",labels="name")
library(pls)
library(FactoMineR)
library(factoextra)
library(corrplot)
#On contrôle la graine du générateur pour que les valeurs tirées d'une facçon aléatoire soient toujours les mêmes:
set.seed(87)
data = read.csv2("donnees_des_pays_du_monde.csv", stringsAsFactors=TRUE)
row.names(data) = data[,1]
data = data[,2:length(data)]
data = data[,-c(4,6,10,17,18,21,22,23)]
names(data)
library(pls)
library(FactoMineR)
library(factoextra)
library(corrplot)
#On contrôle la graine du générateur pour que les valeurs tirées d'une facçon aléatoire soient toujours les mêmes:
set.seed(223)
data = read.csv2("donnees_des_pays_du_monde.csv", stringsAsFactors=TRUE)
row.names(data) = data[,1]
data = data[,2:length(data)]
data = data[,-c(4,6,10,17,18,21,22,23)]
names(data)
ACP=PCA(data,scale.unit = TRUE)
ACP=PCA(data,scale.unit = TRUE)
ACP=PCA(data,scale.unit = TRUE)
ACP=PCA(data,scale.unit = TRUE)
corrplot(cor(data[,1:length(data)]))
fviz_pca_var(ACP, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Évite le chevauchement de texte
)
fviz_pca_ind (ACP, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Évite le chevauchement de texte
)
fviz_pca_biplot(ACP, repel = TRUE,
col.var = "#2E9FDF", # Couleur des variables
col.ind = "#696969"  # Couleur des individues
)
N=dim(data)[1]
napp=floor(3/4*N)
ntest=N-napp
Ind=sample(1:N,napp,replace=FALSE)
data.app=data[Ind,]
data.test=data[-Ind,]
modlin=lm(Espérance.de.Vie~., data=data.app)
summary(modlin)
par(mfrow=c(1,2))
res = residuals(modlin)
hist(res)
qqnorm(res)
qqline(res, col = 2)
shapiro.test(residuals(modlin))
plot.res=function(x,y,titre="")
#Une fonction utile de graphe des résidus.
{
plot(x,y,col="blue",ylab="Résidus",
xlab="Valeurs predites",main=titre)
abline(h=0,col="red")
}
par(mfrow=c(1,1))
plot.res(predict(modlin),res)
mean((residuals(modlin))**2)
pred.test=predict(modlin, newdata=data.test)
res.test=pred.test-data.test$Espérance.de.Vie
mean(res.test**2)
library(pls)
library(FactoMineR)
library(factoextra)
library(corrplot)
#On contrôle la graine du générateur pour que les valeurs tirées d'une facçon aléatoire soient toujours les mêmes:
set.seed(87)
data = read.csv2("donnees_des_pays_du_monde.csv", stringsAsFactors=TRUE)
row.names(data) = data[,1]
data = data[,2:length(data)]
data = data[,-c(4,6,10,17,18,21,22,23)]
names(data)
ACP=PCA(data,scale.unit = TRUE)
ACP=PCA(data,scale.unit = TRUE)
corrplot(cor(data[,1:length(data)]))
fviz_pca_var(ACP, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Évite le chevauchement de texte
)
fviz_pca_ind (ACP, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Évite le chevauchement de texte
)
fviz_pca_ind (ACP, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Évite le chevauchement de texte
)
fviz_pca_biplot(ACP, repel = TRUE,
col.var = "#2E9FDF", # Couleur des variables
col.ind = "#696969"  # Couleur des individues
)
N=dim(data)[1]
napp=floor(3/4*N)
ntest=N-napp
Ind=sample(1:N,napp,replace=FALSE)
data.app=data[Ind,]
data.test=data[-Ind,]
modlin=lm(Espérance.de.Vie~., data=data.app)
summary(modlin)
par(mfrow=c(1,2))
res = residuals(modlin)
hist(res)
qqnorm(res)
qqline(res, col = 2)
shapiro.test(residuals(modlin))
plot.res=function(x,y,titre="")
#Une fonction utile de graphe des résidus.
{
plot(x,y,col="blue",ylab="Résidus",
xlab="Valeurs predites",main=titre)
abline(h=0,col="red")
}
par(mfrow=c(1,1))
plot.res(predict(modlin),res)
mean((residuals(modlin))**2)
pred.test=predict(modlin, newdata=data.test)
res.test=pred.test-data.test$Espérance.de.Vie
mean(res.test**2)
library(pls)
library(FactoMineR)
library(factoextra)
library(corrplot)
#On contrôle la graine du générateur pour que les valeurs tirées d'une facçon aléatoire soient toujours les mêmes:
set.seed(87)
data = read.csv2("donnees_des_pays_du_monde.csv", stringsAsFactors=TRUE)
row.names(data) = data[,1]
data = data[,2:length(data)]
data = data[,-c(4,6,10,17,18,21,22,23)]
names(data)
library(pls)
library(FactoMineR)
library(factoextra)
library(corrplot)
#On contrôle la graine du générateur pour que les valeurs tirées d'une facçon aléatoire soient toujours les mêmes:
set.seed(87)
data = read.csv2("donnees_des_pays_du_monde.csv", stringsAsFactors=TRUE)
row.names(data) = data[,1]
data = data[,2:length(data)]
data = data[,-c(4,6,10,17,18,21,22,23)]
ACP=PCA(data,scale.unit = TRUE)
ACP=PCA(data,scale.unit = TRUE)
library(pls)
library(FactoMineR)
library(factoextra)
library(corrplot)
#On contrôle la graine du générateur pour que les valeurs tirées d'une facçon aléatoire soient toujours les mêmes:
set.seed(87)
data = read.csv2("donnees_des_pays_du_monde.csv", stringsAsFactors=TRUE)
row.names(data) = data[,1]
data = data[,2:length(data)]
data = data[,-c(4,6,10,17,18,21,22,23)]
names(data)
ACP=PCA(data,scale.unit = TRUE)
corrplot(cor(data[,1:length(data)]))
fviz_pca_var(ACP, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Évite le chevauchement de texte
)
fviz_pca_ind (ACP, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Évite le chevauchement de texte
)
fviz_pca_biplot(ACP, repel = TRUE,
col.var = "#2E9FDF", # Couleur des variables
col.ind = "#696969"  # Couleur des individues
)
N=dim(data)[1]
napp=floor(3/4*N)
ntest=N-napp
Ind=sample(1:N,napp,replace=FALSE)
data.app=data[Ind,]
data.test=data[-Ind,]
modlin=lm(Espérance.de.Vie~., data=data.app)
summary(modlin)
par(mfrow=c(1,2))
res = residuals(modlin)
hist(res)
qqnorm(res)
qqline(res, col = 2)
shapiro.test(residuals(modlin))
plot.res=function(x,y,titre="")
#Une fonction utile de graphe des résidus.
{
plot(x,y,col="blue",ylab="Résidus",
xlab="Valeurs predites",main=titre)
abline(h=0,col="red")
}
par(mfrow=c(1,1))
plot.res(predict(modlin),res)
mean((residuals(modlin))**2)
pred.test=predict(modlin, newdata=data.test)
res.test=pred.test-data.test$Espérance.de.Vie
mean(res.test**2)
stdX.app = sqrt(apply(data.app[,-1],2,var)*(napp-1)/napp)
modele.pcr = pcr(Espérance.de.Vie ~.,ncomp=18,data = data.app,scale=stdX.app,validation = "CV")
msepcv.pcr = MSEP(modele.pcr,estimate=c("train","CV")) ## Erreur Quadratique de Prediction.
x = c(msepcv.pcr$val[1,,],msepcv.pcr$val[2,,])
y = c(rep("train",length(msepcv.pcr$val[1,,])),rep("cv",length(msepcv.pcr$val[2,,])))
z = c(0:18,0:18)
dt = data.frame(x,y,z)
colnames(dt) = c("MSEP","sample","comps")
p = ggplot(dt,aes(x=comps,y=MSEP,col=sample))+geom_line()
p+theme_bw()
ncomp.pcr = which.min(msepcv.pcr$val["CV",,])-1
ncomp.pcr
summary(modele.pcr)
modele.pcr.fin = pcr(Espérance.de.Vie~., ncomp=ncomp.pcr, data = data.app, scale=stdX.app)
ychap = predict(modele.pcr.fin,newdata=data.test)[,1,ncomp.pcr]
res.pcr = data.test[,"Espérance.de.Vie"]-ychap
mean(res.pcr**2)
modele.pls = plsr(Espérance.de.Vie ~.,ncomp=18,data = data.app,scale=stdX.app,validation = "CV")
msepcv.pls = MSEP(modele.pls,estimate=c("train","CV")) ## Erreur Quadratique de Prediction.
x=c(msepcv.pls$val[1,,],msepcv.pls$val[2,,])
y=c(rep("train",length(msepcv.pls$val[1,,])),rep("cv",length(msepcv.pls$val[2,,])))
z=c(0:18,0:18)
dt=data.frame(x,y,z)
colnames(dt)=c("msep","sample","comps")
p<-ggplot(dt,aes(x=comps,y=msep,col=sample))+geom_line()
p+theme_bw()
ncomp.pls = which.min(msepcv.pls$val["CV",,])-1
ncomp.pls
summary(modele.pls)
modele.pls.fin = plsr(Espérance.de.Vie~., ncomp=ncomp.pcr,
data = data.app, scale=stdX.app)
ychap = predict(modele.pls.fin,newdata=data.test)[,1,ncomp.pls]
res.pls = data.test[,"Espérance.de.Vie"]-ychap
mean(res.pls^2)
plot(modele.pls, plottype = "scores", comps = 1:3)
plot(modele.pls, ncomp = 3, asp = 1, line = TRUE)
plot(modele.pls, plottype = "coef", ncomp=1:3, legendpos = "bottomleft",labels="name")
library(pls)
library(FactoMineR)
library(factoextra)
library(corrplot)
#On contrôle la graine du générateur pour que les valeurs tirées d'une facçon aléatoire soient toujours les mêmes:
set.seed(666)
data = read.csv2("donnees_des_pays_du_monde.csv", stringsAsFactors=TRUE)
row.names(data) = data[,1]
data = data[,2:length(data)]
data = data[,-c(4,6,10,17,18,21,22,23)]
names(data)
ACP=PCA(data,scale.unit = TRUE)
corrplot(cor(data[,1:length(data)]))
fviz_pca_var(ACP, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Évite le chevauchement de texte
)
fviz_pca_ind (ACP, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Évite le chevauchement de texte
)
fviz_pca_biplot(ACP, repel = TRUE,
col.var = "#2E9FDF", # Couleur des variables
col.ind = "#696969"  # Couleur des individues
)
N=dim(data)[1]
napp=floor(3/4*N)
ntest=N-napp
Ind=sample(1:N,napp,replace=FALSE)
data.app=data[Ind,]
data.test=data[-Ind,]
modlin=lm(Espérance.de.Vie~., data=data.app)
summary(modlin)
par(mfrow=c(1,2))
res = residuals(modlin)
hist(res)
qqnorm(res)
qqline(res, col = 2)
shapiro.test(residuals(modlin))
plot.res=function(x,y,titre="")
#Une fonction utile de graphe des résidus.
{
plot(x,y,col="blue",ylab="Résidus",
xlab="Valeurs predites",main=titre)
abline(h=0,col="red")
}
par(mfrow=c(1,1))
plot.res(predict(modlin),res)
mean((residuals(modlin))**2)
pred.test=predict(modlin, newdata=data.test)
res.test=pred.test-data.test$Espérance.de.Vie
mean(res.test**2)
stdX.app = sqrt(apply(data.app[,-1],2,var)*(napp-1)/napp)
modele.pcr = pcr(Espérance.de.Vie ~.,ncomp=18,data = data.app,scale=stdX.app,validation = "CV")
msepcv.pcr = MSEP(modele.pcr,estimate=c("train","CV")) ## Erreur Quadratique de Prediction.
x = c(msepcv.pcr$val[1,,],msepcv.pcr$val[2,,])
y = c(rep("train",length(msepcv.pcr$val[1,,])),rep("cv",length(msepcv.pcr$val[2,,])))
z = c(0:18,0:18)
dt = data.frame(x,y,z)
colnames(dt) = c("MSEP","sample","comps")
p = ggplot(dt,aes(x=comps,y=MSEP,col=sample))+geom_line()
p+theme_bw()
ncomp.pcr = which.min(msepcv.pcr$val["CV",,])-1
ncomp.pcr
summary(modele.pcr)
modele.pcr.fin = pcr(Espérance.de.Vie~., ncomp=ncomp.pcr, data = data.app, scale=stdX.app)
ychap = predict(modele.pcr.fin,newdata=data.test)[,1,ncomp.pcr]
res.pcr = data.test[,"Espérance.de.Vie"]-ychap
mean(res.pcr**2)
modele.pls = plsr(Espérance.de.Vie ~.,ncomp=18,data = data.app,scale=stdX.app,validation = "CV")
msepcv.pls = MSEP(modele.pls,estimate=c("train","CV")) ## Erreur Quadratique de Prediction.
x=c(msepcv.pls$val[1,,],msepcv.pls$val[2,,])
y=c(rep("train",length(msepcv.pls$val[1,,])),rep("cv",length(msepcv.pls$val[2,,])))
z=c(0:18,0:18)
dt=data.frame(x,y,z)
colnames(dt)=c("msep","sample","comps")
p<-ggplot(dt,aes(x=comps,y=msep,col=sample))+geom_line()
p+theme_bw()
ncomp.pls = which.min(msepcv.pls$val["CV",,])-1
ncomp.pls
summary(modele.pls)
modele.pls.fin = plsr(Espérance.de.Vie~., ncomp=ncomp.pcr,
data = data.app, scale=stdX.app)
ychap = predict(modele.pls.fin,newdata=data.test)[,1,ncomp.pls]
res.pls = data.test[,"Espérance.de.Vie"]-ychap
mean(res.pls^2)
plot(modele.pls, plottype = "scores", comps = 1:3)
plot(modele.pls, ncomp = 3, asp = 1, line = TRUE)
plot(modele.pls, plottype = "coef", ncomp=1:3, legendpos = "bottomleft",labels="name")
library(pls)
library(FactoMineR)
library(factoextra)
library(corrplot)
#On contrôle la graine du générateur pour que les valeurs tirées d'une facçon aléatoire soient toujours les mêmes:
set.seed(88)
data = read.csv2("donnees_des_pays_du_monde.csv", stringsAsFactors=TRUE)
row.names(data) = data[,1]
data = data[,2:length(data)]
data = data[,-c(4,6,10,17,18,21,22,23)]
names(data)
ACP=PCA(data,scale.unit = TRUE)
corrplot(cor(data[,1:length(data)]))
fviz_pca_var(ACP, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Évite le chevauchement de texte
)
fviz_pca_ind (ACP, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Évite le chevauchement de texte
)
fviz_pca_biplot(ACP, repel = TRUE,
col.var = "#2E9FDF", # Couleur des variables
col.ind = "#696969"  # Couleur des individues
)
N=dim(data)[1]
napp=floor(3/4*N)
ntest=N-napp
Ind=sample(1:N,napp,replace=FALSE)
data.app=data[Ind,]
data.test=data[-Ind,]
modlin=lm(Espérance.de.Vie~., data=data.app)
summary(modlin)
par(mfrow=c(1,2))
res = residuals(modlin)
hist(res)
qqnorm(res)
qqline(res, col = 2)
shapiro.test(residuals(modlin))
plot.res=function(x,y,titre="")
#Une fonction utile de graphe des résidus.
{
plot(x,y,col="blue",ylab="Résidus",
xlab="Valeurs predites",main=titre)
abline(h=0,col="red")
}
par(mfrow=c(1,1))
plot.res(predict(modlin),res)
mean((residuals(modlin))**2)
pred.test=predict(modlin, newdata=data.test)
res.test=pred.test-data.test$Espérance.de.Vie
mean(res.test**2)
stdX.app = sqrt(apply(data.app[,-1],2,var)*(napp-1)/napp)
modele.pcr = pcr(Espérance.de.Vie ~.,ncomp=18,data = data.app,scale=stdX.app,validation = "CV")
msepcv.pcr = MSEP(modele.pcr,estimate=c("train","CV")) ## Erreur Quadratique de Prediction.
x = c(msepcv.pcr$val[1,,],msepcv.pcr$val[2,,])
y = c(rep("train",length(msepcv.pcr$val[1,,])),rep("cv",length(msepcv.pcr$val[2,,])))
z = c(0:18,0:18)
dt = data.frame(x,y,z)
colnames(dt) = c("MSEP","sample","comps")
p = ggplot(dt,aes(x=comps,y=MSEP,col=sample))+geom_line()
p+theme_bw()
ncomp.pcr = which.min(msepcv.pcr$val["CV",,])-1
ncomp.pcr
summary(modele.pcr)
modele.pcr.fin = pcr(Espérance.de.Vie~., ncomp=ncomp.pcr, data = data.app, scale=stdX.app)
ychap = predict(modele.pcr.fin,newdata=data.test)[,1,ncomp.pcr]
res.pcr = data.test[,"Espérance.de.Vie"]-ychap
mean(res.pcr**2)
modele.pls = plsr(Espérance.de.Vie ~.,ncomp=18,data = data.app,scale=stdX.app,validation = "CV")
msepcv.pls = MSEP(modele.pls,estimate=c("train","CV")) ## Erreur Quadratique de Prediction.
x=c(msepcv.pls$val[1,,],msepcv.pls$val[2,,])
y=c(rep("train",length(msepcv.pls$val[1,,])),rep("cv",length(msepcv.pls$val[2,,])))
z=c(0:18,0:18)
dt=data.frame(x,y,z)
colnames(dt)=c("msep","sample","comps")
p<-ggplot(dt,aes(x=comps,y=msep,col=sample))+geom_line()
p+theme_bw()
ncomp.pls = which.min(msepcv.pls$val["CV",,])-1
ncomp.pls
summary(modele.pls)
modele.pls.fin = plsr(Espérance.de.Vie~., ncomp=ncomp.pcr,
data = data.app, scale=stdX.app)
ychap = predict(modele.pls.fin,newdata=data.test)[,1,ncomp.pls]
res.pls = data.test[,"Espérance.de.Vie"]-ychap
mean(res.pls^2)
plot(modele.pls, plottype = "scores", comps = 1:3)
plot(modele.pls, ncomp = 3, asp = 1, line = TRUE)
plot(modele.pls, plottype = "coef", ncomp=1:3, legendpos = "bottomleft",labels="name")
setwd("~/Bureau/Stage_Projet_RTS/X(g)Boost")
library(tidyverse)
library(xgboost)
library(caret)
library(readxl)
library(readxl)
library(tidyverse)
library(xgboost)
library(caret)
library(readxl)
library(tidyverse)
install.packages("tidyverse")
library(xgboost)
library(caret)
library(readxl)
install.packages("tidyverse")
# Import & création de noms de colonnes plus parlants :
df = read_excel("Folds5x2_pp.xlsx")
# Import & création de noms de colonnes plus parlants :
df = read_excel("CCP/Folds5x2_pp.xlsx")
# Import & création de noms de colonnes plus parlants :
df = read_excel("CCP\Folds5x2_pp.xlsx")
# Import & création de noms de colonnes plus parlants :
df = read_excel("CCP/Folds5x2_pp.xlsx")
library(readxl)
# Import & création de noms de colonnes plus parlants :
df = read_excel("CCP/Folds5x2_pp.xlsx")
# Import & création de noms de colonnes plus parlants :
df = read_excel("CCPP/Folds5x2_pp.xlsx")
colnames(df) = c("Temp", "VEchap", "PressAtm", "Humid", "ProdElec")
View(df)
DT::datatable(head(df, n = 50))
DT::datatable(head(df, n=50))
library(corrplot)
corrplot(cor(df), method = "ellipse")
library(GGally)
install.packages("GGally")
ggpairs(df)
library(GGally)
ggpairs(df)
ggplot(data = df, aes(x = Temp, y = ProdElec)) + geom_point() + geom_smooth(method = "lm")
ggplot(data = df, aes(x = Temp, y = ProdElec))
ggplot(data = df, aes(x = Temp, y = ProdElec)) + geom_point()
ggplot(data = df, aes(x = Temp, y = ProdElec)) + geom_point() + geom_smooth(method = "lm")
ggplot(data = df, aes(x = PressAtm, y = ProdElec)) + geom_point() + geom_smooth(method = "lm")
set.seed(1337)
inTrain = createDataPartition(y=df$ProdElec, p=0.85, list = FALSE)
View(inTrain)
View(inTrain)
inTrain <- createDataPartition(y = df$ProdElec, p = 0.85, list = FALSE)  # 85% des données dans le train, et le rest dans le test
View(inTrain)
training <- df[inTrain, ]
testing <- df[-inTrain, ]
X_train = xgb.DMatrix(as.matrix(training %>% select(-ProdElec)))
library(tidyverse)
library(xgboost)
install.packages("xgboost")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
update.packages()
sessionInfo()
