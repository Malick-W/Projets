#########################
# WADE El Hadji Malick  #
# Master 2 Data Science #
#########################
#########################################################################################
################################ Chargement des données #################################
## On charge les librairies necessaires
library("igraph") # pour le graphe
library('RColorBrewer') # pour les couleurs graphiques
## fournir le chemin absolu des données (2x-2x)
MatIndiv = data.matrix(read.csv("/users/mmath/wade/Bureau/Master_DS/Option_Biologie/Genealogie/Pop2x.csv", header = TRUE, sep = ";"))
n = nrow(MatIndiv) # Nombre d'individus
#########################################################################################
################################ Fonctions ##############################################
## compte le nombre d'enfants virtuels de meme genotype que l'enfant de reference
# in : enfants virtuels (matrice avec un genotype sur chaque ligne), genotype de l'enfant (vecteur)
# out : le nombre d'enfants virtuels correspondant
comparerEnf = function(EnfVirt, Enf){
EnfTri = sort(Enf)
if(is.element(0,EnfTri)){
EnfTri[1] = EnfTri[2]
}
compteur = 0 # Initialisation du compteur du nombre d'enfants virtuels correspondant
for (i in 1:nrow(EnfVirt)){
EnfVirtLTri = sort(EnfVirt[i,])
if(sum(abs(sort(EnfTri) - sort(EnfVirtLTri))) == 0){
compteur = compteur + 1
}
}
return(compteur)
}
## Genere la liste des enfants virtuels a partir du genotype des parents pour le schema 2x-2x
# in : genotype des parents (vecteurs de taille 2)
# out : liste des enfants virtuels (matrice de 4 lignes et 2 colonnes)
genererEnfVirt22 = function(GenP1s, GenP2s){
ListeEnfVirt = matrix(0, nrow = 4, ncol = 2) # Initialisation es 4 enfants virtuels pour le schema 2x-2x
nb = 1
GenP1s = sort(GenP1s)
GenP2s = sort(GenP2s)
# On verifie si l'un des alleles a pour valeur 0, puis on la modifie le cas echeant
if(is.element(0,GenP1s)){
GenP1s[1] = GenP1s[2]
}
if(is.element(0,GenP2s)){
GenP2s[1] = GenP2s[2]
}
# On rajoute chaque croisement d'alleles dans ListeEnfVirt
for (i in GenP1s){
for (j in GenP2s){
ListeEnfVirt[nb,] = c(i,j)
nb = nb + 1
}
}
return(ListeEnfVirt)
}
## calcul de la proba d'un lien entre deux parents et un enfant
# in : infos genetiques sur les deux parents et l'enfant (vecteurs de taille 17 : genotypes 4x4 + ploidie)
# out : proba du lien
calculerProbaLien = function(GenP1, GenP2, GenE){
plo1 = GenP1[17] # ploidie du parent 1
plo2 = GenP2[17] # ploidie du parent 2
ploE = GenE[17] # ploidie de l'enfant
# Traiter seulement 2x-2x dans un premier temps (recuperer les ploidies et rentrer seulement si toutes sont egales a 2)
if((plo1 == 2) & (plo2 == 2) & (ploE == 2)){
proba = 1 # Initialisation de la probabilite
# Boucler sur les 4 signaux en multipliant la variable proba par la nouvelle probabilite
for (signal in 1:4){
GenP1sign = GenP1[(1:4)+(signal-1)*4]
GenP2sign = GenP2[(1:4)+(signal-1)*4]
GenEsign = GenE[(1:4)+(signal-1)*4]
# Creer des vecteurs de taille 2 avec les alleles des parents et de l'enfant sur le signal
G1 = GenP1sign[1:2]
G2 = GenP2sign[1:2]
GE = GenEsign[1:2]
# Generer les enfants virtuels du croisement, comparer avec l'enfant et deduire la proba
ListeEnfVirt = genererEnfVirt22(G1,G2)
nbMatch = comparerEnf(ListeEnfVirt,GE)/4
proba = nbMatch*proba
}
}
else{
proba = 0
}
return(proba)
}
## construit pour un enfant la matrice des probas associee a tous les couples de parents potentiels
# in : numero de l'enfant
# out : matrice des probas (n lignes et n colonnes)
calculerProbasParents = function(enfant){
MatProbasParents = matrix(0, nrow = n, ncol = n) # Initialisation de la matrice = 0
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((i != j) & (i != enfant) & (j != enfant) & (MatIndiv[i,18] < MatIndiv[enfant,18]) & (MatIndiv[j,18] < MatIndiv[enfant,18])){
proba = calculerProbaLien(MatIndiv[i,1:17],MatIndiv[j,1:17],MatIndiv[enfant,1:17])
MatProbasParents[i,j] = proba
}
}
}
sommeProba = sum(MatProbasParents)
if (sommeProba != 0){
MatProbasParents = MatProbasParents/sommeProba
}
return(MatProbasParents)
}
## Recherche du couple de parents le plus probable pour un enfant
# in : numero de l'enfant
# out : couple de parents le plus probable (vecteur de taille 4 : enfant/parent 1/parent 2/log-proba du lien)
recupParentsMax = function(e){
ParentsMax = c(e,0,0,0) # Initialisation de ParentsMax
MatProbasParents = calculerProbasParents(e)
pmax = max(MatProbasParents)
if(pmax != 0){
IndMax = which(MatProbasParents == pmax, arr.ind = TRUE)
# Par convention : mettre 0-0 pour les parents si toutes les probas sont nulles, et 0 dans la case log-proba
ParentsMax[2] = IndMax[1,1]
ParentsMax[3] = IndMax[1,2]
ParentsMax[4] = log(pmax)
}
return(ParentsMax)
}
## Construit la genealogie de plus grande proba associee a la matrice des individus
# in : rien
# out : genealogie la plus probable (matrice de n lignes et 4 colonnes) munie de la log-vraisemblance
construireGen = function(){
Gen = matrix(0, nrow = n, ncol = 4)
for(individu in 1:n){
p = recupParentsMax(individu)
Gen[individu,] = p
}
return(list(Gen = Gen, lLik = sum(Gen[,4])))
}
#########################################################################################
################################ Contruction du graphe #################################
## Construit le graphe généalogique associé aux données
representerGen = function(GenMax){
nodes = data.frame(id=GenMax$Gen[,1], gen=MatIndiv[,18])
links = data.frame()
for (i in 1:n) {
if (GenMax$Gen[i,2] != 0 & GenMax$Gen[i,3] != 0){
link1 = data.frame(from=GenMax$Gen[i,2],
to=GenMax$Gen[i,1],
weight=round(exp(GenMax$Gen[i,4]),2))
link2 = data.frame(from=GenMax$Gen[i,3],
to=GenMax$Gen[i,1],
weight=round(exp(GenMax$Gen[i,4]),2))
links = rbind(links,link1,link2)
}
}
net = graph_from_data_frame(d=links, vertices=nodes, directed=TRUE)
net
nombre_de_generation = max(MatIndiv[,18])
#colrs = rainbow(nombre_de_generation, alpha=.5)
colrs = brewer.pal(nombre_de_generation, "Set3")
# Attribuer des couleurs selon le type de média
V(net)$color = colrs[V(net)$gen]
V(net)$size = 12
V(net)$label.font = 4  #Fonte : 1 normal, 2 gras, 3, italique, 4 italique gras, 5 symbole
V(net)$label.color = "black"
V(net)$label.family = "Times"
# Épaisseur des liens fonction de l'intensité
E(net)$width = E(net)$weight*4
# Changer la taille des flèches et la couleur des liens
E(net)$arrow.size = 0.6 #Taille des fléches, 1 par défaut
E(net)$arrow.width = 1.5 #Épaisseur des flèches, 1 par défaut
E(net)$edge.lty = 3 #Type de ligne
E(net)$label = E(net)$weight #Vecteur de type caractère utilisé pour nommer les liens
E(net)$edge.label.family = "Helvetica" #Police des labels (e.g.“Times”, “Helvetica”)
#E(net)$label.color = "black"
E(net)$edge.label.cex = 0.1 #Taille de la police pour les labels des liens
E(net)$edge.color = "gray80"
E(net)$edge.label = E(net)$weight
plot(net, main ="Genealogie de la diploidie")
legend("bottomleft", inset = 0.001, title="génération", legend = 1:nombre_de_generation, pch=21,
text.font=4, col="#777777", pt.bg=colrs, pt.cex=1, cex=.6, bty="n", ncol=1)
}
#########################################################################################
################################# Application ###########################################
GenMax = construireGen()
representerGen(GenMax)
## Documentation sur les graphes
#https://f.hypotheses.org/wp-content/blogs.dir/2996/files/2017/02/visualiseR.pdf
setwd("~/Bureau/Projets/Projets/Series_Chrono")
# simulation d'un ARMA de taille n, centre en m, de parametres Phi et Theta, a bruit gaussien de variance s2
simulerARMA = function(n, m, Phi, Theta, s2){
# attention : rnorm prend l'ecart-type en parametre et non la variance
E = rnorm(n, 0, sqrt(s2))
X = rep(0, n)
# recuperation des rangs p et q
p = length(Phi)
q = length(Theta)
# les max(p,q) premieres valeurs doivent etre initialisees
# on peut les laisser nulles, on peut les mettre egales au bruit, ... choix de l'utilisateur
X[1:max(p,q)] = E[1:max(p,q)]
for (i in (max(p,q)+1):n){
# on recupere les valeurs precedentes pour l'autoregression (si p>=1)
if (p >= 1){
valPrecX = t(Phi)%*%(X[(i-1):(i-p)]-m)
} else{
valPrecX = 0
}
# on recupere les valeurs precedentes pour la moyenne mobile (si q>=1)
if (q >= 1){
valPrecE = t(Theta)%*%E[(i-1):(i-q)]
} else{
valPrecE = 0
}
# recurrence ARMA
X[i] = m + valPrecX + valPrecE + E[i]
}
# graphique
plot(X, type="l", xlab="Temps", ylab="Serie X", col="blue")
return(X)
}
# simulation d'un ARMA de taille n, centre en m, de parametres Phi et Theta, a bruit gaussien de variance s2
tracerCorr = function(X, lag){
# partage en deux de la fenetre graphique
par(mfrow = c(1,2))
acf(X, lag.max=lag, ylim=c(-1,1), main="ACF de la serie", xlab="h", ylab="ACF empirique")
pacf(X, lag.max=lag, ylim=c(-1,1), main="PACF de la serie", xlab="h", ylab="PACF empirique")
}
# teste la significativite des parametres dans le modele ARMA, au risque alpha
significativite = function(ARMA, alpha){
# recuperation des estimations
Est = ARMA$coef
# recuperation des ecarts-types estimes
EstSd = sqrt(diag(ARMA$var.coef))
# affichage des conclusions
print(abs(Est/EstSd) > qnorm(1-alpha/2))
}
# affiche un diagnostic de normalite
outilsNormalite = function(Res){
n = length(Res)
# partage en trois de la fenetre graphique
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
hist(Res, breaks=sqrt(n), xlab="Residus", ylab="Densite empirique", main="", freq=FALSE)
qqnorm(Res, xlab="Quantiles theoriques", ylab="Quantiles empiriques", main="")
plot(Res/sd(Res), type="p", xlab="Temps", ylab="Residus", main="")
abline(h=c(-1.96, 1.96), col="red")
}
# affiche un diagnostic de normalite
outilsBlancheur = function(Res, lag){
n = length(Res)
# partage en trois de la fenetre graphique
layout(matrix(c(1,2,3,4), 2, 2, byrow = TRUE))
plot(Res, type="l", col="red", xlab="Temps", ylab="Residus")
plot(Res[1:(n-1)], Res[2:n], type="p", main="", xlab="residus t-1", ylab="residus t")
acf(Res, lag.max=lag, ylim=c(-1,1), main="ACF des residus", xlab="h", ylab="ACF empirique")
pacf(Res, lag.max=lag, ylim=c(-1,1), main="PACF des residus", xlab="h", ylab="PACF empirique")
}
# simulation d'un ARMA
n = 200
Phi = c(0.8)
Theta = c(0.5)
m = -1
s2 = 0.5
X = simulerARMA(n, m, Phi, Theta, s2)
# ACF et PACF
tracerCorr(X, 25)
# estimation ARMA, residus et fitted values
ARMA = arima(X, order=c(1,0,1))
Res = ARMA$residuals
Fit = X-Res
# superposition serie/reconstruction
dev.off()
plot(X, type="l", xlab="Temps", ylab="Serie X", col="blue")
lines(Fit, type="l", xlab="Temps", ylab="Serie X", col="red", lty=2)
# test de significativite des coefficients
alpha = 0.05
significativite(ARMA, alpha)
# diagnostic sur les residus
outilsNormalite(Res)
outilsBlancheur(Res, 20)
Box.test(Res, lag=3, type="Ljung-Box")
shapiro.test(Res)
# quelques outils (tests ADF/KPSS, auto.arima, ...)
library("aTSA")
library("forecast")
# ouverture du fichier
Strates = read.csv("strates.txt")$Strates
# ouverture du fichier
Strates = read.csv("/users/mmath/wade/Bureau/Projets/Projets/Series_Chrono/TP/strates.txt")$Strates
n = length(Strates)
# aspect visuel : transformation necessaire
# le log (possible car >0) appaisera les pics, harmonisera la variance, reduira l'echelle des donnees
plot(1:n, Strates, type="l", col="blue", xlab="Temps", ylab="Strates")
LStrates = log(Strates)
plot(1:n, LStrates, type="l", col="blue", xlab="Temps", ylab="Strates logarithmiques")
# pour les tests ADF et KPSS, on se contente ici de Type 1
# (Type 2 et Type 3 regardent la stationnarite des residus apres avoir estime une tendance (respectivement constante et lineaire)
# KPSS (Type 1) : non stationnaire
# ADF (Type 1) : non stationnaire pour des lags raisonnables (on regarde 3 ou 4, par exemple)
kpss.test(LStrates)
adf.test(LStrates)
# une representation graphique superposant la serie avec une moyenne lissee (fenetre de 80)
fen = 80
LStratesLiss = rep(0, n-fen)
for (i in 1:(n-fen)){
LStratesLiss[i] = mean(LStrates[i:(i+fen)])
}
plot(1:n, LStrates, type="l", col="blue", xlab="Temps", ylab="Strates logarithmiques")
lines((fen/2+1):(n-fen/2), LStratesLiss, col="red", type="p")
# tendance cubique estimee par OLS
Tps = 1:n
Tps2 = (1:n)^2
Tps3 = (1:n)^3
RL = lm(LStrates ~ Tps+Tps2+Tps3)
summary(RL)
# recuperation des coefficients estimes de la tendance et les valeurs reconstruires (Fit = Serie-Res)
Coef = RL$coef
EstTrend = RL$fitted.values
Res = LStrates-EstTrend
MSETendCub = sum(Res^2)
# superposition de la serie avec son estimation
plot(1:n, LStrates, type="l", col="blue", xlab="Temps", ylab="Strates logarithmiques")
lines(1:n, EstTrend, type="l", col="red")
# residus stationnaires (pour modelisation ARMA) ?
plot(Res, type="l", col="red", xlab="Temps", ylab="Residus de la modelisation")
kpss.test(Res)
adf.test(Res)
# graphiquement ? (attention a l'effet trompeur du a l'echelle des ordonnees)
fen = 80
ResLissM = rep(0, n-fen)
ResLissV = rep(0, n-fen)
for (i in 1:(n-fen)){
ResLissM[i] = mean(Res[i:(i+fen)])
ResLissV[i] = var(Res[i:(i+fen)])
}
plot(Res, type="l", col="red", xlab="Temps", ylab="Residus de la modelisation")
lines((fen/2+1):(n-fen/2), ResLissM, col="red", type="p")
lines((fen/2+1):(n-fen/2), ResLissV, col="blue", type="p")
# tendance sinusoidale estimee par OLS (+ grille)
# on fait varier thera pour trouver celui qui minimise le MSE (= somme des carres des residus)
MSEmin = +Inf
for (theta in 300:500){
RL = lm(LStrates ~ cos(2*pi*Tps/theta))
if (sum(RL$residuals^2) < MSEmin){
MSEmin = sum(RL$residuals^2)
thetamin = theta
}
}
actual <- c(1.1, 1.9, 3.0, 4.4, 5.0, 5.6)
predicted <- c(0.9, 1.8, 2.5, 4.5, 5.0, 6.2)
mape(actual, predicted)
install.packages("Metrics")
librar
actual <- c(1.1, 1.9, 3.0, 4.4, 5.0, 5.6)
predicted <- c(0.9, 1.8, 2.5, 4.5, 5.0, 6.2)
mape(actual, predicted)
